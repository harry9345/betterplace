{"ast":null,"code":"// Challenge 1 solution\nconst friends = [{\n  name: \"Sam\",\n  score: 20,\n  isMeet: false\n}, {\n  name: \"John\",\n  score: 100,\n  isMeet: true\n}, {\n  name: \"Mykaila\",\n  score: 1000,\n  isMeet: true\n}, {\n  name: \"jeniffer\",\n  score: 5,\n  isMeet: false\n}, {\n  name: \"Mona\",\n  score: 10 ^ 7,\n  isMeet: true\n}, {\n  name: \"Jim\",\n  score: 10,\n  isMeet: false\n}, {\n  name: \"Adele\",\n  score: 5,\n  isMeet: false\n}, {\n  name: \"Harry\",\n  score: 10 ^ 7,\n  isMeet: false\n}];\nexport default function tobiesFriends(n) {\n  console.table(friends); // sort the friends list by thier score DESC\n\n  n.sort((a, b) => parseFloat(b.score) - parseFloat(a.score));\n  let callCount = 0;\n\n  for (let i = 0; i < n.length; i++) {\n    if (n[i].isMeet) {\n      n[i].score = n[n.length - 1].score - 1;\n    } else {\n      n[i].isMeet = true;\n      n[i].score = n[n.length - 1].score - 1;\n      addScore(n, i);\n      callCount++;\n    }\n  }\n\n  function addScore(FriendsList, index) {\n    let m = 10 ^ 7;\n\n    for (let i = index + 1; i < FriendsList.length; i++) {\n      if (FriendsList[i].score >= m) {\n        return FriendsList[i].score;\n      } else {\n        FriendsList[i].score++;\n      }\n    }\n  } // callCount is the amout call he has to make\n\n\n  console.log(\"call count\", callCount);\n  console.table(friends);\n  return callCount;\n}\ntobiesFriends(friends);","map":{"version":3,"sources":["/Users/mona/Desktop/Projects/React/userCode/betterplace-fe-test/src/challenge_1.js"],"names":["friends","name","score","isMeet","tobiesFriends","n","console","table","sort","a","b","parseFloat","callCount","i","length","addScore","FriendsList","index","m","log"],"mappings":"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","sourcesContent":["// Challenge 1 solution\nconst friends = [\n  {\n    name: \"Sam\",\n    score: 20,\n    isMeet: false,\n  },\n  {\n    name: \"John\",\n    score: 100,\n    isMeet: true,\n  },\n  {\n    name: \"Mykaila\",\n    score: 1000,\n    isMeet: true,\n  },\n  {\n    name: \"jeniffer\",\n    score: 5,\n    isMeet: false,\n  },\n  {\n    name: \"Mona\",\n    score: 10 ^ 7,\n    isMeet: true,\n  },\n  {\n    name: \"Jim\",\n    score: 10,\n    isMeet: false,\n  },\n  {\n    name: \"Adele\",\n    score: 5,\n    isMeet: false,\n  },\n  {\n    name: \"Harry\",\n    score: 10 ^ 7,\n    isMeet: false,\n  },\n];\nexport default function tobiesFriends(n) {\n  console.table(friends);\n  // sort the friends list by thier score DESC\n  n.sort((a, b) => parseFloat(b.score) - parseFloat(a.score));\n  let callCount = 0;\n  for (let i = 0; i < n.length; i++) {\n    if (n[i].isMeet) {\n      n[i].score = n[n.length - 1].score - 1;\n    } else {\n      n[i].isMeet = true;\n      n[i].score = n[n.length - 1].score - 1;\n      addScore(n, i);\n      callCount++;\n    }\n  }\n  function addScore(FriendsList, index) {\n    let m = 10 ^ 7;\n    for (let i = index + 1; i < FriendsList.length; i++) {\n      if (FriendsList[i].score >= m) {\n        return FriendsList[i].score;\n      } else {\n        FriendsList[i].score++;\n      }\n    }\n  }\n  // callCount is the amout call he has to make\n  console.log(\"call count\", callCount);\n  console.table(friends);\n  return callCount;\n}\ntobiesFriends(friends);\n"]},"metadata":{},"sourceType":"module"}